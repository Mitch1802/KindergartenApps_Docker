name: Build and publish Docker Images Main Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CONTAINER_NAME: 'my_postgres'
  DB_USER: 'sh17vFE9ttPIuk1'
  DB_PASSWORD: 'ksiEvu4eJxL5Ud9FThtZ'
  DB_NAME: 'app-live'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Load environment variables from .env
        run: |
          echo "Lade Variablen aus .env..."
          while IFS= read -r line || [ -n "$line" ]; do
            if [ -n "$line" ] && [ "${line:0:1}" != "#" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env

      - name: Start Postgres container
        run: |
          docker run -d --name ${{ env.CONTAINER_NAME }} \
            -e POSTGRES_USER=${{ env.DB_USER }} \
            -e POSTGRES_PASSWORD=${{ env.DB_PASSWORD }} \
            -e POSTGRES_DB=${{ env.DB_NAME }} \
            -p 5432:5432 \
            postgres:15-bullseye
        
      - name: Debug Container Status
        run: |
          # Eine Sekunde warten, damit der Container auch wirklich anläuft oder crasht
          sleep 1
          echo "Docker Container Status:"
          docker ps -a
      
          echo ""
          echo "Docker Container Logs:"
          docker logs ${{ env.CONTAINER_NAME }}

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r django/requirements/production.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec ${{ env.CONTAINER_NAME }} pg_isready -U ${{ env.DB_USER }}; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Ensure database exists
        run: |
          docker exec -e PGPASSWORD="${{ env.DB_PASSWORD }}" ${{ env.CONTAINER_NAME }} \
            psql -U ${{ env.DB_USER }} -c "CREATE DATABASE \"${{ env.DB_NAME }}\";" \
            || echo "Database '${{ env.DB_NAME }}' already exists"

      - name: Generate DJANGO_SECRET_KEY
        id: generate_secret_key
        run: echo "DJANGO_SECRET_KEY=$(openssl rand -base64 32)" >> $GITHUB_ENV

      - name: Pull latest changes
        run: |
          git fetch origin main
          git rebase origin/main || git merge origin/main

      - name: Run makemigrations
        run: |
          python django/manage.py makemigrations
          python django/manage.py migrate
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Auto-Generated Migrations for Version ${{ env.VERSION }}" || echo "No changes to commit"
        env:
          DATABASE_URL: postgres://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:${{ env.DB_PORT }}/${{ env.DB_NAME }}

      - name: Push migrations
        run: |
          git push origin main --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node for Angular Build
        uses: actions/setup-node@v3
        with:
          node-version: '22.20'

      - name: Install & Build Angular
        run: |
          cd frontend
          npm install
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build the Docker Images
        id: build-docker-image
        run: |
          docker compose -f docker-compose.yml build

      - name: Push the Docker Images
        id: push-docker-image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:db-${{ env.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:api-${{ env.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:nginx-${{ env.VERSION }}

      - name: Verify Docker Images Integrity
        run: |
          echo "Überprüfe das PostgreSQL-Image:"
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:db-${{ env.VERSION }} psql --version

          echo "Überprüfe das API-Image:"
          docker run --rm --entrypoint gunicorn ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:api-${{ env.VERSION }} --version

          echo "Überprüfe das Nginx-Image:"
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:nginx-${{ env.VERSION }} nginx -v

      - name: List local Docker images
        run: docker images